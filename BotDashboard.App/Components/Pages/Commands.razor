@page "/commands"
@using MudBlazor
@using BotDashboard.App.Constants

<PageTitle>Commands</PageTitle>

<div class="row gy-3">
    <div class="col-md-6">
        <h2 class="text-white fw-bold">
            <i class="bi bi-command"></i>
            Commands
        </h2>

        <div class="card main-site-card">
            <div class="position-relative">
                <div class="bg-image hover-overlay ripple" data-mdb-ripple-color="light">
                    <div class="mt-2 ms-3 text-center">
                        <img src="imgs/1024px-DigitalOcean_logo.svg.png"
                             width="128" height="128" alt="Digital Ocean"/>
                    </div>
                </div>
                <div class="card-body text-center">
                    <h2 class="card-title font-weight-bold">
                        Commands
                    </h2>
                    <div class="container justify-content-center">
                        <div class="row">
                            <div class="col-md-12">
                                <MudButtonGroup class="d-flex justify-content-center" Color="Color.Primary" Size="Size.Large" Variant="Variant.Outlined">
                                    <MudButton OnClick="StartAllImages">Start All Images</MudButton>
                                    <MudButton OnClick="StopAllContainers">Stop All Containers</MudButton>
                                    <MudButton OnClick="RestartAllContainers">Restart All Containers</MudButton>
                                    <MudButton OnClick="ListImages">List All Images</MudButton>
                                    <MudButton OnClick="ListContainers">List All Containers</MudButton>
                                </MudButtonGroup>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <MudButtonGroup class="d-flex justify-content-center" Color="Color.Tertiary" Size="Size.Large" Variant="Variant.Outlined">
                                    <MudButton OnClick="() => RunImage(DockerRepository.JokeBot)">Start JokeBot</MudButton>
                                    <MudButton OnClick="() => RunImage(DockerRepository.TriviaBot)">Start TriviaBot</MudButton>
                                    <MudButton OnClick="() => RunImage(DockerRepository.FactBot)">Start FactBot</MudButton>
                                    <MudButton OnClick="() => RunImage(DockerRepository.PremBot)">Start PremBot</MudButton>
                                    <MudButton OnClick="() => RunImage(DockerRepository.JamJunction)">Start JamJunction</MudButton>
                                </MudButtonGroup>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <MudButtonGroup class="d-flex justify-content-center" Color="Color.Primary" Size="Size.Large" Variant="Variant.Outlined">
                                    <MudButton OnClick="() => PullImage(DockerRepository.JokeBot)">Pull JokeBot</MudButton>
                                    <MudButton OnClick="() => PullImage(DockerRepository.TriviaBot)">Pull TriviaBot</MudButton>
                                    <MudButton OnClick="() => PullImage(DockerRepository.FactBot)">Pull FactBot</MudButton>
                                    <MudButton OnClick="() => PullImage(DockerRepository.PremBot)">Pull PremBot</MudButton>
                                    <MudButton OnClick="() => PullImage(DockerRepository.JamJunction)">Pull JamJunction</MudButton>
                                </MudButtonGroup>
                            </div>
                        </div>
                    </div>
                    <p class="text-white text-start mt-4">Output: @CommandResult</p>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <h2 class="text-white font-weight-bold fw-bold">
            <i class="bi bi-tsunami"></i>
            Images
        </h2>
        <div class="card main-site-card">
            <div class="position-relative">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-dark table-striped table-hover table-bordered table-active image-table-corner table">
                            <thead>
                            <tr>
                                @foreach (var heading in Headings)
                                {
                                    <th>@heading</th>
                                }
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var dockerImage in DockerImages)
                            {
                                <tr>

                                    <td>@dockerImage.Repository</td>
                                    <td>@dockerImage.Tag</td>
                                    <td>@dockerImage.ImageId</td>
                                    <td>@dockerImage.Created</td>
                                    <td>@dockerImage.Size</td>
                                    <td>
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveImage(dockerImage.ImageId)"></MudIconButton>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                    <p class="text-white">Last Fetched: @ImageFetchTime</p>
                </div>
            </div>
        </div>
    </div>
</div>

<hr class="text-white"/>
<h2 class="text-white mt-4 fw-bold">
    <i class="bi bi-box-seam"></i>
    Containers Running
</h2>
<div class="row gy-2">
    @if (Containers.Count == 0)
    {
        <p class="lead text-white">There are no containers currently running...</p>
    }
    @foreach (var container in Containers.OrderBy(x => x.Image))
    {
        <div class="col-md-4 mb-4">
            <div class="card container-card">
                <div class="position-relative">
                    <div class="bg-image hover-overlay ripple" data-mdb-ripple-color="light">
                        <div class="mt-2 ms-3">
                            <img src="https://www.svgviewer.dev/static-svgs/13822/discord-icon.svg"
                                 width="50" height="50" alt="@container.Image"/>
                        </div>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title lead">
                            @container.Image.Replace("kalebg08/", "").ToUpper()
                        </h5>
                        <p class="card-text mt-4" style="color: #8893AC">Container Id: @container.ContainerId</p>
                        <p class="card-text" style="color: #8893AC">Created: @container.Created</p>
                        <p class="card-text" style="color: #8893AC">Status: @container.Status</p>
                    </div>
                </div>
                <div class="position-absolute restart-icon-position">
                    <i class="bi bi-arrow-counterclockwise restart-icon" @onclick="() => RestartContainer(container.ContainerId)"></i>
                </div>
                <div class="form-check form-switch position-absolute form-check-position">
                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" @onclick="() => StopContainer(container.ContainerId)" checked>
                </div>
            </div>
        </div>
    }
</div>
<p class="text-white">Last Fetched: @ContainerFetchTime</p>